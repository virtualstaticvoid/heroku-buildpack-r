#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

#
# NOTES:
#
# R presents some unique challenges when used on Heroku
#
# The buildpack includes all the binaries required for R to run however,
# application authors need to include additional packages which need to be built
# in order to be included in the slug compilation. This means a build environment
# is needed at slug compilation time.
#
# R is built (by default) with the path prefix of "/usr".
# (See https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Installation for
# details on the prefix configure options.)
#
# This is a problem on Heroku, since /usr is locked down and cannot be modified.
#
# In the previous version of the R buildpack, R was built from source using "/app" for
# the prefix. While this worked, there were several issues with resolution of dependencies
# for which there were many "hacks" employed. E.g. overriding LD_LIBRARY_PATH and other
# environment variables, using symlinks, and changing paths in ldconfig files etc.
#
# Further complexity is created by the way Heroku slug compilation works, in that the BUILD_DIR
# is not same path as that in the final deployment, so further hacks were required to move files
# around, to and from /app and BUILD_DIR. This caused issues with symlinks and since the files for
# the slug are compressed in a tar.gz file, the "untarring" caused further issues.
#
# Worse still, is that version mismatches between components emerged, which caused segfaults
# and other hard to solve problems.
#
# The solution? Try to use "official" packaged R versions, installed to default locations.
#
# Yet another version of the buildpack used the Apt buildpack, so that apt-get could be used to
# install R and it's dependencies, but this approach proved to be fraught with similar path issues.
#
# Finally, (this version) uses a chroot method, which provides a sandbox in which to install R
# correctly, and all it's dependencies, with all symlinks and paths intact.
#
# A small complication to this approach is that since Heroku cannot run chroot under sudo, a fake chroot
# has to be used to allow for chroot to work under the standard user.
#
# The upside of this approach are:
#
#  * Less hacks applied, thus less details of R need to be known by the buildpack.
#  * More maintainable when newer R versions need to be supported.
#  * More stable, since dependencies and pathings are standard.
#  * No segfaults or other hard to track down errors.
#
# The downsides of this approach are:
#
#  * Slightly larger slug of ~110MB,
#
#  * Under certain circumstances, an "ugly" command line to run R is used
#    E.g. `fakechroot fakeroot chroot /app/.root /usr/bin/R ... --no-save`
#    There are however wrapper scripts for R and Rscript which take care of this.
#
#  * Your application files are in /app, which need to be symlinked into the chroot, which
#    can cause issues if the R `base::normalizePath(..., mustWork=TRUE)` method is used.
#    A "method replacement hack" in `Rprofile.site` solves this issue.
#
#  * Some third party libraries for R cannot be used, since R needs to run in the chroot, and
#    the library is not executed in the chroot, making R inaccessible.
#    RServe is the most viable interface to R in this case. See the node.js example application.
#

# fail fast
set -e

# debug
# set -x

shopt -s extglob

# helper functions

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function read_var() {
  echo $(head -n 1 $1)
}

# from https://devcenter.heroku.com/articles/buildpack-api#bin-detect
function export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

#
# chroot scripts embed fully qualified path
# this functional allows you to rewrite the path
#
function patch_chroot() {
  old=$1
  new=$2
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/bin/env.fakechroot"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/bin/fakechroot"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/bin/ldd.fakechroot"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/etc/fakechroot/chroot.env"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/etc/fakechroot/debootstrap.env"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/etc/fakechroot/rinse.env"
  sed -i "s#$old#$new#g" "$BUILD_DIR/.tools/fakechroot/lib/fakechroot/libfakechroot.la"
}

# parse and derive params
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# fix STACK variable if unset
if [ -z "${STACK}" ]; then
  STACK="heroku-16"
fi

# ensure correct stack
if [[ ! "$STACK" == "heroku-16" ]]; then

  echo
  echo "-----> ERROR: This version of the buildpack is intended for use with the 'heroku-16' stack"
  echo
  echo "       Use the 'heroku stack:set' CLI command to use the 'heroku-16' stack."
  echo "       See https://devcenter.heroku.com/articles/stack for more information."
  echo
  exit 1

fi

# read in R version if file exists
if [[ -f "$BUILD_DIR/.r-version" ]]; then
  R_VERSION=`read_var $BUILD_DIR/.r-version`
  echo "NOTE: Using R version override [$R_VERSION]" | indent
else
  R_VERSION="3.4.0"
fi

# environment
TOOLS_DIR="$BUILD_DIR/.tools"
FAKECHROOT_DIR="$TOOLS_DIR/fakechroot"
CHROOT_DIR="$BUILD_DIR/.root"
# Note: fakeroot is included at buildtime, so no need to reference our copy at this stage

export PATH="$FAKECHROOT_DIR/sbin:$FAKECHROOT_DIR/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

# load application environment variables,
# so that they can be accessed by this script
export_env_dir "$ENV_DIR"

# S3 bucket, cran mirror, buildpack version can be set via environment
S3_BUCKET=${S3_BUCKET:-"heroku-buildpack-r"}
CRAN_MIRROR=${CRAN_MIRROR:-"http://cran.revolutionanalytics.com"}
BUILD_PACK_VERSION=${BUILD_PACK_VERSION:-latest}

# build up path to binaries on S3
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"

# vendor R into the slug
topic "Vendoring R $R_VERSION for $STACK stack ($BUILD_PACK_VERSION)"

# download and unpack binaries
echo "Downloading and unpacking R binaries ($R_BINARIES)" | indent

pushd $BUILD_DIR > /dev/null
curl $R_BINARIES -s -o - | tar xzf - -C .
popd > /dev/null

# Check if we can pull from cache rather than downloading
if [[ -f "$CACHE_DIR/.r-version" ]] &&
   [[ "$(read_var $CACHE_DIR/.r-version)" = "$R_VERSION" ]];
then
  echo "Retrieving R binaries and packages from cache" | indent
  cp -r $CACHE_DIR/vendor/. $CHROOT_DIR
fi

# set to build dir, so packages can be installed
patch_chroot "/app" "$BUILD_DIR"

pushd $CHROOT_DIR > /dev/null

# link app dir into chroot
ln -sf $BUILD_DIR app

# make /app the home directory since application
# authors will expect the same behaviour within the chroot
# as the heroku instance. I.e. /app exists and contains their code etc.
sed -i "s#root:x:0:0:root:/root:/bin/bash#root:x:0:0:root:/app:/bin/bash#g" etc/passwd

###
#
# FIXME:
#   might be a bug in fakechroot, which doesn't work when a relative symlink refers to a child in the same directory,
#
#   e.g. /usr/lib/libR.so => R/lib/libR.so
#        changing the symlink to the following works
#        /usr/lib/libR.so => ../lib/R/lib/libR.so
#

fakechroot fakeroot chroot $CHROOT_DIR \
  /bin/sh -c 'cd /usr/lib && ln -sf ../lib/R/lib/libR.so libR.so'

#
###

popd > /dev/null

# Aptfile?
if [[ -f "$BUILD_DIR/Aptfile" ]]; then

  topic "Installing binary dependencies from Aptfile"

  # TODO: add support for deb files

  PACKAGES=""
  while IFS='' read -r PACKAGE || [[ -n "$PACKAGE" ]]; do
    PACKAGES="$PACKAGES $PACKAGE"
  done < "$BUILD_DIR/Aptfile"

  fakechroot fakeroot chroot $CHROOT_DIR \
    apt-get update > /dev/null

  fakechroot fakeroot chroot $CHROOT_DIR \
    apt-get install -y $PACKAGES 2>&1 | indent

  fakechroot fakeroot chroot $CHROOT_DIR \
    apt-get clean > /dev/null

  # remove unneeded files
  fakechroot fakeroot chroot $CHROOT_DIR \
    rm -rf /var/lib/apt/lists/* > /dev/null

fi

# write normalizePath hack to Rprofile.site
cp "$BUILDPACK_DIR/bin/Rprofile.site" "$CHROOT_DIR/etc/R/Rprofile.site"

# install application author dependencies from CRAN
topic "Executing init.r script"

# get the init.r file to use
# it can be init.[rR] or run.R
if [[ -f "$BUILD_DIR/init.r" ]]; then
  INIT_FILE="$BUILD_DIR/init.r"
elif [[ -f "$BUILD_DIR/init.R" ]]; then
  INIT_FILE="$BUILD_DIR/init.R"
else
  # assuming run.R is present
  unset INIT_FILE
fi

if [[ ! -z "$INIT_FILE" ]]; then

  # prepare wrapper script
  WRAPPER="$BUILD_DIR/wrapper.R"
  cp "$BUILDPACK_DIR/bin/wrapper.R" $WRAPPER

  # perform insertions
  #  would have preferred to use sed or awk for this, but it's real tricky with multi-line
  #  replacements, so using a Ruby program, as Ruby is installed on Heroku by default
  ruby "$BUILDPACK_DIR/bin/util.rb" "$WRAPPER" "$INIT_FILE" "$BUILD_DIR" "$CRAN_MIRROR"

  # execute the init wrapper
  # working directory must be /app so that provided packages/scripts can be found
  fakechroot fakeroot chroot $CHROOT_DIR \
    /usr/bin/R --no-save --quiet --slave --file=/app/wrapper.R 2>&1 | indent

  # determine whether the R script failed
  if [[ -f "$CHROOT_DIR/app/status" ]]; then
    echo "R $R_VERSION successfully installed (with init)" | indent
  else
    echo -e "\033[1;31mERROR: R $R_VERSION failed while executing \"init\". Check the log for details.\033[0m" | indent
    exit 1
  fi

else

  echo "R $R_VERSION successfully installed" | indent

fi

# fix up /app symlink for runtime location
pushd $CHROOT_DIR > /dev/null
rm app
ln -s /app app
popd > /dev/null

# remove unneeded files to reduce slug size
rm -rf $CHROOT_DIR/tmp/*.rds
rm -rf $CHROOT_DIR/tmp/downloaded_packages/*
rm -rf $CHROOT_DIR/var/cache/apt
rm -rf $CHROOT_DIR/var/lib/dpkg

# when deployed, the path will be /app
patch_chroot "$BUILD_DIR" "/app"

# copy over environment
mkdir -p "$BUILD_DIR/.profile.d"
cp "$BUILDPACK_DIR/bin/renv.sh" "$BUILD_DIR/.profile.d/renv.sh"

# copy wrappers to /app/bin
mkdir -p "$BUILD_DIR/bin"
cp "$BUILDPACK_DIR/bin/R_wrapper" "$BUILD_DIR/bin/R"
cp "$BUILDPACK_DIR/bin/Rscript_wrapper" "$BUILD_DIR/bin/Rscript"

# copy to the cache directory
echo "$R_VERSION" > "$CACHE_DIR/.r-version"
mkdir -p $CACHE_DIR/vendor/etc \
         $CACHE_DIR/vendor/usr/bin \
         $CACHE_DIR/vendor/usr/lib \
         $CACHE_DIR/vendor/usr/local/lib/

cp $BUILD_DIR/.r-version $CACHE_DIR/vendor
cp -r $CHROOT_DIR/etc/R $CACHE_DIR/vendor/etc
cp -r $CHROOT_DIR/usr/bin/R $CACHE_DIR/vendor/usr/bin
cp -r $CHROOT_DIR/usr/lib/R $CACHE_DIR/vendor/usr/lib
cp -r $CHROOT_DIR/usr/local/lib/R $CACHE_DIR/vendor/usr/local/lib/

# give environment to later buildpacks
cat > "$BUILDPACK_DIR/export" <<EOL
declare -x S3_BUCKET="$S3_BUCKET"
declare -x TOOLS_DIR="$TOOLS_DIR"
declare -x FAKECHROOT_DIR="$FAKECHROOT_DIR"
declare -x CHROOT_DIR="$CHROOT_DIR"
declare -x CRAN_MIRROR="$CRAN_MIRROR"
EOL
