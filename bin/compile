#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function read_var() {
  echo $(head -n 1 $1)
}

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"
GCC_VERSION=4.8

# fix STACK variable if unset
if [ -z "${STACK}" ];
then
  STACK="cedar-14"
fi

# config

# read in R version if file exists
if [[ -f $BUILD_DIR/.r-version ]]; then
  R_VERSION=`read_var $BUILD_DIR/.r-version`
else
  R_VERSION="3.2.4"
fi

# read in buildback binary version if file exists
if [[ -f $BUILD_DIR/.r-buildpack-version ]]; then
  BUILD_PACK_VERSION=`read_var $BUILD_DIR/.r-buildpack-version`
else
  BUILD_PACK_VERSION="20160322-0811"
fi

S3_BUCKET="heroku-buildpack-r"
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"

VENDOR_DIR="$BUILD_DIR/vendor"
CRAN_MIRROR="http://cran.revolutionanalytics.com"

mkdir -p $CACHE_DIR

# vendor R into the slug
echo "Vendoring R $R_VERSION for $STACK stack ($BUILD_PACK_VERSION)" | indent

# Check if we can pull from cache rather than download tar
if [ "$(cat $CACHE_DIR/vendor/R/bin/.version 2>/dev/null)" = "$R_VERSION" ]
then
  echo "Desired R version ($R_VERSION) cached" | indent
  cp -R $CACHE_DIR/vendor/R $VENDOR_DIR/.
  cp -R $CACHE_DIR/vendor/.apt $VENDOR_DIR/.
else
  # download and unpack binaries
  echo "Downloading and unpacking R binaries ($R_BINARIES)" | indent
  curl $R_BINARIES -s -o - | tar xzf - -C $BUILD_DIR
fi

# also using buildpack-apt?
if [ -d $BUILD_DIR/.apt ]; then
  cp -r $VENDOR_DIR/.apt/ $BUILD_DIR
else
  mv $VENDOR_DIR/.apt/ $BUILD_DIR
fi

# need to copy the binaries to /app/vendor so that R works when compiling packages

mkdir -p /app/.apt
cp -R $BUILD_DIR/.apt/* /app/.apt

mkdir -p /app/vendor/R
cp -R $VENDOR_DIR/R/* /app/vendor/R

# trialed and errored on this; copy over libs to gfortran, so
# that liblto_plugin.so and others can be found
# (tried using LDFLAGS, LD_LIBRARY_PATH and LIBRARY_PATH but didn't work)
cp -R /usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION/* /app/.apt/usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION
# cp /usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION/liblto_plugin.so /app/.apt/usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION/liblto_plugin.so

# set environment variables, needed for compiling packages
source "$BUILDPACK_DIR/bin/r_environment.sh"

# copy over environment
mkdir -p $BUILD_DIR/.profile.d
cp "$BUILDPACK_DIR/bin/r_environment.sh" "$BUILD_DIR/.profile.d/r_environment.sh"

# prevent warnings when building packages
mkdir -p /app/vendor/R/lib64/R/doc/html
touch /app/vendor/R/lib64/R/doc/html/R.css

# install dependencies from CRAN
echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
/app/vendor/R/bin/R -s <<RPROG | indent
  Sys.setenv(BUILD_DIR="$BUILD_DIR")
  setwd("$BUILD_DIR")
  r <- getOption("repos");
  r["CRAN"] <- "$CRAN_MIRROR";
  options(repos=r);
  `cat $BUILD_DIR/init.r`
RPROG

echo "R $R_VERSION successfully installed" | indent

# need to copy binaries back so that any
# installed packages are included in the slug
rm -rf $VENDOR_DIR/R
mkdir -p $VENDOR_DIR/R
cp -R /app/vendor/R/* $VENDOR_DIR/R

# cache
mkdir -p $CACHE_DIR/vendor/R
cp -R $VENDOR_DIR/R/* $CACHE_DIR/vendor/R
mkdir -p $CACHE_DIR/vendor/.apt
cp -R /app/.apt/* $CACHE_DIR/vendor/.apt
echo "$R_VERSION" > $CACHE_DIR/vendor/R/bin/.version
